{"version":3,"file":"static/js/700.1d15c421.chunk.js","mappings":"sQACA,EAA2B,4BAA3B,EAAsE,gCAAtE,EAAkH,6BAAlH,EAA2J,6BAA3J,EAAyM,kCAAzM,EAAoP,0BAApP,EAAyR,4B,SCM1Q,SAASA,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAaC,EAAAA,EAAAA,MAAbD,UAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAK,mCAAG,qFACZN,GAAa,GADD,mBAGJO,EAAAA,EAAAA,IAAgBJ,GAAUK,MAAK,SAAAC,GAAI,OAAIX,EAAUW,EAAKC,KAAnB,IAH/B,sDAKVR,EAAS,EAAD,IALE,uBAOVF,GAAa,GAPH,0EAAH,qDAUXM,GACD,GAAE,CAACH,IAEJ,IAAMQ,GAAgBZ,GAA+B,IAAlBF,EAAOe,OAE1C,OACE,gCACGb,IAAa,SAACc,EAAA,EAAD,IACbF,IACC,eAAIG,UAAWC,EAAf,oDAEF,eAAID,UAAWC,EAAf,UACId,GACAJ,GACAA,EAAOmB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,aAAxB,OACT,gBAAaN,UAAWC,EAAxB,WACE,gBACED,UAAWC,EACXM,IACED,EAAY,yCAC0BA,GAClC,IAAIE,IACF,aAIRC,IAAI,KAGLJ,GACC,eAAIL,UAAWC,EAAf,SAA+BI,KAE/B,4CAEDD,GACC,eAAIJ,UAAWC,EAAf,SAAoCG,KAEpC,eAAIJ,UAAWC,EAAf,oCAtBKE,EADA,QA8BpB,C,sNCjEKO,EAAW,gCACXC,EAAM,mC,SAIGC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,6GAA2BC,EAA3B,+BAAiC,GAAIC,EAArC,+BAA8C,CAAC,EAA/C,SACyBC,EAAAA,EAAAA,IAAUF,EAAKC,GADxC,uBACUnB,EADV,EACUA,KADV,kBAESA,GAFT,mEAKO,SAASqB,IACd,OAAOJ,EAAY,GAAD,OAAIF,EAAJ,uCAA2CC,GAC9D,CAIM,SAASM,EAAkBC,GAChC,OAAON,EAAY,GAAD,OACbF,EADa,gCACmBC,EADnB,kBACgCO,EADhC,uCAGnB,CAEM,SAASC,EAAgBC,GAC9B,OAAOR,EAAY,GAAD,OACbF,EADa,iBACIU,EADJ,oBACwBT,EADxB,mBAGnB,CAGM,SAASlB,EAAgB2B,GAC9B,OAAOR,EAAY,GAAD,OACbF,EADa,iBACIU,EADJ,4BACgCT,EADhC,mBAGnB,CAEM,SAASU,EAAgBD,GAC9B,OAAOR,EAAY,GAAD,OACbF,EADa,iBACIU,EADJ,4BACgCT,EADhC,mBAGnB,CAEDM,EAAkBK,UAAY,CAC5BJ,MAAOK,IAAAA,OAAAA,YAGTJ,EAAgBG,UAAY,CAC1BF,SAAUG,IAAAA,OAAAA,YAGZF,EAAgBC,UAAY,CAC1BF,SAAUG,IAAAA,OAAAA,YAGZ9B,EAAgB6B,UAAY,CAC1BF,SAAUG,IAAAA,OAAAA,W","sources":["webpack://goit-react-hw-05-movies/./src/pages/MovieCast/MovieCast.module.css?a7d2","pages/MovieCast/MovieCast.jsx","services/Api.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"CastList\":\"MovieCast_CastList__M7OOb\",\"MovieCastImg\":\"MovieCast_MovieCastImg__vop1Z\",\"ActorCard\":\"MovieCast_ActorCard__xqW5Z\",\"ActorName\":\"MovieCast_ActorName__UcSba\",\"ActorCharacter\":\"MovieCast_ActorCharacter__x7+JT\",\"NoInfo\":\"MovieCast_NoInfo__B+7yf\",\"NoActors\":\"MovieCast_NoActors__ZGdYT\"};","import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from '../../services/Api';\nimport { Loader } from '../../components/Loader/Loader';\nimport css from '../MovieCast/MovieCast.module.css';\n\nexport default function Cast() {\n  const [actors, setActors] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { moviesId } = useParams();\n\n  useEffect(() => {\n    const fetch = async () => {\n      setIsLoading(true);\n      try {\n        await getMovieCredits(moviesId).then(data => setActors(data.cast));\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetch();\n  }, [moviesId]);\n\n  const showNoActors = !isLoading && actors.length === 0;\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {showNoActors && (\n        <h2 className={css.NoActors}>No actors for this movie üôÅ</h2>\n      )}\n      <ul className={css.CastList}>\n        {!error &&\n          actors &&\n          actors.map(({ id, character, name, profile_path }) => (\n            <li key={id} className={css.ActorCard}>\n              <img\n                className={css.MovieCastImg}\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w300${profile_path}`\n                    : new URL(\n                        '../../images/image_not_available.png',\n                        import.meta.url\n                      )\n                }\n                alt=\"\"\n              />\n\n              {name ? (\n                <h2 className={css.ActorName}>{name}</h2>\n              ) : (\n                <h2>No actor`s name</h2>\n              )}\n              {character ? (\n                <h3 className={css.ActorCharacter}>{character}</h3>\n              ) : (\n                <h3 className={css.NoInfo}>No actor`s character</h3>\n              )}\n            </li>\n          ))}\n      </ul>\n    </>\n  );\n}\n\nCast.propTypes = {\n  searchFilms: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      character: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      profile_path: PropTypes.string.isRequired,\n      backdrop_path: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'e32f5431d23ebe7deb7fe030b4ef583a';\n\n// https://api.themoviedb.org/3/movie/550?api_key=e32f5431d23ebe7deb7fe030b4ef583a\n\nasync function fetchMovies(url = '', config = {}) {\n  const { data } = await axios.get(url, config);\n  return data;\n}\n\nexport function getTrendMovies() {\n  return fetchMovies(`${BASE_URL}/trending/movie/day?api_key=${KEY}`);\n}\n\n// console.log(getTrendMovies());\n\nexport function getSearchedMovies(query) {\n  return fetchMovies(\n    `${BASE_URL}search/movie?api_key=${KEY}&query=${query}&language=en-US&include_adult=false`\n  );\n}\n\nexport function getMovieDetails(movie_id) {\n  return fetchMovies(\n    `${BASE_URL}movie/${movie_id}?api_key=${KEY}&language=en-US`\n  );\n}\n// console.log(getMovieDetails(640146));\n\nexport function getMovieCredits(movie_id) {\n  return fetchMovies(\n    `${BASE_URL}movie/${movie_id}/credits?api_key=${KEY}&language=en-US`\n  );\n}\n\nexport function getMovieReviews(movie_id) {\n  return fetchMovies(\n    `${BASE_URL}movie/${movie_id}/reviews?api_key=${KEY}&language=en-US`\n  );\n}\n\ngetSearchedMovies.propTypes = {\n  query: PropTypes.string.isRequired,\n};\n\ngetMovieDetails.propTypes = {\n  movie_id: PropTypes.number.isRequired,\n};\n\ngetMovieReviews.propTypes = {\n  movie_id: PropTypes.number.isRequired,\n};\n\ngetMovieCredits.propTypes = {\n  movie_id: PropTypes.number.isRequired,\n};\n"],"names":["Cast","useState","actors","setActors","isLoading","setIsLoading","error","setError","moviesId","useParams","useEffect","fetch","getMovieCredits","then","data","cast","showNoActors","length","Loader","className","css","map","id","character","name","profile_path","src","URL","alt","BASE_URL","KEY","fetchMovies","url","config","axios","getTrendMovies","getSearchedMovies","query","getMovieDetails","movie_id","getMovieReviews","propTypes","PropTypes"],"sourceRoot":""}