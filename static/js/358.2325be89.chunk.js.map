{"version":3,"file":"static/js/358.2325be89.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/pages/MovieDetailsPage/MovieDetails.module.css?a206","pages/MovieDetailsPage/MovieDetailsPage.jsx","services/Api.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"BackBtn\":\"MovieDetails_BackBtn__y+L+d\",\"Section\":\"MovieDetails_Section__p3hYl\",\"Container\":\"MovieDetails_Container__iKOUs\",\"Txt\":\"MovieDetails_Txt__KBfVU\",\"GenresList\":\"MovieDetails_GenresList__sufr9\",\"GenreName\":\"MovieDetails_GenreName__sJ0Rf\",\"MovieTitle\":\"MovieDetails_MovieTitle__o4vTc\",\"MovieImg\":\"MovieDetails_MovieImg__m3tzp\",\"CastLink\":\"MovieDetails_CastLink__X7dFj\",\"ReviewsLink\":\"MovieDetails_ReviewsLink__QS0-m\",\"DownSection\":\"MovieDetails_DownSection__AS5Ce\",\"active\":\"MovieDetails_active__Q-EOm\"};","import { useState, useEffect } from 'react';\nimport { useParams, Outlet, useLocation, NavLink } from 'react-router-dom';\nimport { getMovieDetails } from '../../services/Api';\nimport { Loader } from '../../components/Loader/Loader';\nimport css from '../MovieDetailsPage/MovieDetails.module.css';\n\nexport default function MovieDetailsPage() {\n  const [movies, setMovies] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  let { moviesId } = useParams();\n\n  const location = useLocation();\n  const locationFrom = location?.state?.from ?? '/';\n\n  useEffect(() => {\n    const oneMovie = async () => {\n      setIsLoading(true);\n      try {\n        await getMovieDetails(moviesId).then(data => {\n          setMovies(data);\n          console.log(data);\n        });\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    oneMovie();\n  }, [moviesId]);\n\n  const releaseData = new Date(movies.release_date);\n  const { release_date, title, vote_average, overview, genres, poster_path } =\n    movies;\n\n  return (\n    <>\n      <NavLink to={locationFrom} className={css.BackBtn}>\n        üëà ¬†¬†BACK\n      </NavLink>\n      {isLoading && <Loader />}\n      {error && <h1>Sory, there is nothing üôÅ, try again</h1>}\n      {!error && (\n        <section className={css.Section}>\n          <img\n            className={css.MovieImg}\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/w300${poster_path}`\n                : new URL(\n                    '../../images/image_not_available.png',\n                    import.meta.url\n                  )\n            }\n            alt={title}\n            max-width={'240px'}\n          />\n\n          <div className={css.Container}>\n            <h2 className={css.MovieTitle}>\n              {title} ({releaseData.getFullYear(release_date)})\n            </h2>\n            <h3>\n              User score:\n              <span className={css.GenreName}> {vote_average * 10}%</span>\n            </h3>\n            <h3>Genres:</h3>\n            <ul className={css.GenresList}>\n              {genres &&\n                genres.map(({ name }) => (\n                  <h3 className={css.GenreName} key={name}>\n                    {name}\n                  </h3>\n                ))}\n            </ul>\n            <h3>Overview </h3>\n            {overview ? (\n              <p className={css.Txt}>{overview}</p>\n            ) : (\n              <p className={css.Txt}>No overview</p>\n            )}\n          </div>\n        </section>\n      )}\n      {!error && (\n        <section className={css.DownSection}>\n          <NavLink\n            // className={css.CastLink}\n            className={({ isActive }) =>\n              `${css.CastLink} ${isActive ? css.active : ''}`\n            }\n            to={`cast`}\n            state={{ from: locationFrom }}\n          >\n            Cast\n          </NavLink>\n          <NavLink\n            // className={css.ReviewsLink}\n            className={({ isActive }) =>\n              `${css.ReviewsLink} ${isActive ? css.active : ''}`\n            }\n            to={`reviews`}\n            state={{ from: locationFrom }}\n          >\n            Reviews\n          </NavLink>\n        </section>\n      )}\n      <section>\n        <Outlet />\n      </section>\n    </>\n  );\n}\n","import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'e32f5431d23ebe7deb7fe030b4ef583a';\n\n// https://api.themoviedb.org/3/movie/550?api_key=e32f5431d23ebe7deb7fe030b4ef583a\n\nasync function fetchMovies(url = '', config = {}) {\n  const { data } = await axios.get(url, config);\n  return data;\n}\n\nexport function getTrendMovies() {\n  return fetchMovies(`${BASE_URL}/trending/movie/day?api_key=${KEY}`);\n}\n\n// console.log(getTrendMovies());\n\nexport function getSearchedMovies(query) {\n  return fetchMovies(\n    `${BASE_URL}search/movie?api_key=${KEY}&query=${query}&language=en-US&include_adult=false`\n  );\n}\n\nexport function getMovieDetails(movie_id) {\n  return fetchMovies(\n    `${BASE_URL}movie/${movie_id}?api_key=${KEY}&language=en-US`\n  );\n}\n// console.log(getMovieDetails(640146));\n\nexport function getMovieCredits(movie_id) {\n  return fetchMovies(\n    `${BASE_URL}movie/${movie_id}/credits?api_key=${KEY}&language=en-US`\n  );\n}\n\nexport function getMovieReviews(movie_id) {\n  return fetchMovies(\n    `${BASE_URL}movie/${movie_id}/reviews?api_key=${KEY}&language=en-US`\n  );\n}\n\ngetSearchedMovies.propTypes = {\n  query: PropTypes.string.isRequired,\n};\n\ngetMovieDetails.propTypes = {\n  movie_id: PropTypes.number.isRequired,\n};\n\ngetMovieReviews.propTypes = {\n  movie_id: PropTypes.number.isRequired,\n};\n\ngetMovieCredits.propTypes = {\n  movie_id: PropTypes.number.isRequired,\n};\n"],"names":["MovieDetailsPage","useState","movies","setMovies","isLoading","setIsLoading","error","setError","moviesId","useParams","location","useLocation","locationFrom","state","from","useEffect","oneMovie","getMovieDetails","then","data","console","log","releaseData","Date","release_date","title","vote_average","overview","genres","poster_path","to","className","css","Loader","src","URL","alt","getFullYear","map","name","isActive","BASE_URL","KEY","fetchMovies","url","config","axios","getTrendMovies","getSearchedMovies","query","movie_id","getMovieCredits","getMovieReviews","propTypes","PropTypes"],"sourceRoot":""}